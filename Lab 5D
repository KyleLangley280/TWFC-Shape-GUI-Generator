package LangleyLab5D;

import java.awt.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;

public class Lab5D extends JPanel {
    
    private final int MAX_LAYER = 10;
    
    private ArrayList<Shape> shapes;
    
    /* CONSTRUCTOR */
    
    public Lab5D() {
        
        super();
        
        this.setBackground(Color.decode("#00BFFF")); // Deep Sky Blue

        shapes = new ArrayList<>();
        
        /* Create Shapes */
        Random rand = new Random();
        
        for (int i = 0; i < 30; ++i){
           
            int shapeselector = rand.nextInt(3) + 1;
            
            switch (shapeselector){
                
                    case 1:
                        shapes.add(new Circle(rand.nextInt(500) + 1,rand.nextInt(500) + 1, rand.nextInt(9) + 1,(double)(rand.nextInt(100) + 10)));
                        break;
                    case 2:
                        shapes.add(new Rectangle(rand.nextInt(500) + 1,rand.nextInt(500) + 1, rand.nextInt(9) + 1,(double)(rand.nextInt(100) + 10),(double)(rand.nextInt(100) + 10)));
                        break;
                    case 3:
                        shapes.add(new Triangle(rand.nextInt(500) + 1,rand.nextInt(500) + 1, rand.nextInt(9) + 1,(double)(rand.nextInt(100) + 10),(double)(rand.nextInt(100) + 10)));
                        break;
                    default:
                        System.out.println(shapeselector);
            }
        }
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        
        super.paintComponent(g);

        /* Iterate through Layers 1 through 10 */
        
        for (int i = 0; i < MAX_LAYER; ++i) {

            /* Iterate through Shape collection */
        
            for (Shape s : shapes) {

                /* Get X and Y coordinates */
                
                int x = s.getX();
                int y = s.getY();

                /* Check Layer */
                
                if (s.getZ() == i) {

                    /* RECTANGLE */

                    if (s instanceof Rectangle) {

                      g.setColor(Color.decode("#B22222")); // Firebrick Red
                        
                      
                      int length = (int)((Rectangle) s).getLength();
                      int width = (int)((Rectangle) s).getWidth();
                      g.fillRect(x - (width/2) ,y - (length/2), length ,width);

                    }

                    /* CIRCLE */

                    else if (s instanceof Circle) {

                        g.setColor(Color.YELLOW); // Yellow
                        
                        int radius = 2*(int)((Circle) s).getRadius();
                        g.fillOval(x - radius/2, y - radius/2, radius, radius);

                    }

                    /* TRIANGLE */

                    else if (s instanceof Triangle) {

                        g.setColor(Color.decode("#228B22")); // Forest Green
                        
                       int base = (int)((Triangle) s).getBase();
                       int height = (int)((Triangle)s).getHeight();
                        
                      
                       int [] xPoints = { x - (base/2) , x , x + (base/2)};
                       int [] yPoints = { y + (height/2) , y - (height/2) , (y + (height/2))};
                       int nPoints = 3;
                        
                       g.fillPolygon(xPoints, yPoints, nPoints);

                    }
                    
                    /* Tag shape with area */

                    g.setColor(Color.ORANGE);
                    g.drawString(Integer.toString((int)s.area()), x, y);
                    
                } // end layer if

            } // end shapes loop
            
        } // end layer loop
        
    } // end paintComponent()

}
